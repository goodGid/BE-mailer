# 워크 플로우 이름
name: Project CI/CD

# 워크 플로우가 언제 실행 될지를 정한다.
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# 워크 플로우가 깃 레포에 대한 권한을 읽기 만 가능하게 설정한다.
permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest #실행 환경 지정
    #실행 스텝 지정
    steps:
      #check-out 하여 레포지토리에 접근할 수 있는 action
      - uses : actions/checkout@v3

      #jdk 17
      - uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      #Gradle 빌드
      #gradle build (-x test: 테스트 생략 빌드)
      - name: Build with Gradle
        run: |
          echo ${{secrets.APPLICATION_YML}} | base64 --decode
           chmod +x ./gradlew
          ./gradlew clean build
          ./gradlew build -x test


      #현재시간가져오기
      - name : Get current time
        user : josStorer/get-current-time@v2.0.2
        id : current-time
        with :
          format : YYYY-MM-DDTHH-mm-ss
          utcOffset : "+09:00"

      # 빌드해서 생긴 JAR 파일을 깃허브 아티팩트로 업로드
      # Artifact를 통해 작업을 완료한 후 데이터를 보관하고 동일한 Workflow의 다른 작업에서 공유
#      - name: Upload build artifact
#        uses: actions/upload-artifact@v4
#        with:
#          name: g25Server
#          # 업로드할 파일의 경로를 지정 (build/libs,  g25Server jar 파일을 업로드)
#          # 빌드 단계에서 생성된 jar파일
#          path: build/libs/g25Server-0.0.1-SNAPSHOT.jar


          
  #배포
#  deploy:
#    needs: build #빌드 성공한 경우에만 deploy
#    # Ubuntu 환경에서 실행 (Github Actions에서 제공하는 기본 실행 중 하나)
#    runs-on: ubuntu-latest
#
#    # Github 이벤트가 push일 때만 작업을 실행
#    if: github.event_name == 'push'
#
#    # 위의 빌드작업한 JAR 파일 = 아티팩트를 다운로드
#    steps:
#      - name: Download build artifact
#        uses: actions/download-artifact@v4
#        with:
#          # Project 이름으로 업로드된 artifact를 build/libs 경로에 다운로드
#          name: g25Server
#          path: build/libs/
#
#
#      # EC2에 배포
#      # EC2 SSH 키를 private_key.pem 파일로 저장 ( 위치는 GitHub 서버 )
#      # SCP를 사용하여 JAR 파일을 EC2 서버로 복사
#      # SSH를 사용하여 EC2 서버에 연결하고 현재 실행 중인 Java 프로세스를 종료한 다음 새로운 Java 프로세스 생성 및 실행!!
#      ## NLP 적용하면 IP -> 도메인으로 수정 + EC2 늘리면 run 추가
#      - name: Deploy to EC2
#        run: |
#          echo "${{ secrets.EC2_SSH_KEY }}" > private_key.pem
#          chmod 600 private_key.pem
#          scp -i private_key.pem -o StrictHostKeyChecking=no build/libs/g25Server-0.0.1-SNAPSHOT.jar ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USERNAME }}/g25Server.jar
#          ssh -i private_key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "pgrep java | xargs kill -9; nohup java -jar /home/${{ secrets.EC2_USERNAME }}/g25Server.jar > app.log 2>&1 &"
#          rm -f private_key.pem